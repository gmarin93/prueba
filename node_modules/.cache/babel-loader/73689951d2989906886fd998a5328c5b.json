{"ast":null,"code":"import _slicedToArray from\"/home/sisagricola/Documents/Software/Challenges/chellengesGmarin93/postcommentsapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{getPosts}from\"../actions/PostsActions\";import{getComments}from\"../actions/CommentsActions\";import PostList from\"../components/PostList\";import{jsx as _jsx}from\"react/jsx-runtime\";var Index=function Index(){var dispatch=useDispatch();var postsData=useSelector(function(state){return state.postsState.posts;});var commentsData=useSelector(function(state){return state.commentsState.comments;});var postLoading=useSelector(function(state){return state.postsState.loading;});var commentLoading=useSelector(function(state){return state.commentsState.loading;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),matchedData=_useState2[0],MatchingData=_useState2[1];useEffect(function(){/**\n     * Gets data from API\n     */function getDatsAPI(){if(Object.keys(postsData).length===0){//Getting posts data\ndispatch(getPosts());//Getting comments data\ndispatch(getComments());}matchData();//Match posts to their right comments\n};getDatsAPI();},[postLoading,commentLoading]);/**\n   * Match posts and their right comments\n   */function matchData(){var arrayPosts=[];if(Object.keys(postsData).length>0&&Object.keys(commentsData).length>0){postsData.map(function(post){var commentsFiltered=commentsData.filter(function(e){return e.postId===post.id;});arrayPosts.push({post:post,comments:commentsFiltered});});MatchingData(arrayPosts);}}return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"row justify-content-center\",children:matchedData.length>0&&/*#__PURE__*/_jsx(PostList,{matchedData:matchedData})})});};export default Index;","map":{"version":3,"sources":["/home/sisagricola/Documents/Software/Challenges/chellengesGmarin93/postcommentsapp/src/pages/index.js"],"names":["React","useState","useEffect","useDispatch","useSelector","getPosts","getComments","PostList","Index","dispatch","postsData","state","postsState","posts","commentsData","commentsState","comments","postLoading","loading","commentLoading","matchedData","MatchingData","getDatsAPI","Object","keys","length","matchData","arrayPosts","map","post","commentsFiltered","filter","e","postId","id","push"],"mappings":"yMAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,QAAT,KAAyB,yBAAzB,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,C,2CAGA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClB,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CAEA,GAAMO,CAAAA,SAAS,CAAGN,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACC,UAAN,CAAiBC,KAA5B,EAAD,CAA7B,CACA,GAAMC,CAAAA,YAAY,CAAGV,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACI,aAAN,CAAoBC,QAA/B,EAAD,CAAhC,CACA,GAAMC,CAAAA,WAAW,CAAGb,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACC,UAAN,CAAiBM,OAA5B,EAAD,CAA/B,CACA,GAAMC,CAAAA,cAAc,CAAGf,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACI,aAAN,CAAoBG,OAA/B,EAAD,CAAlC,CANkB,cAQkBjB,QAAQ,CAAC,EAAD,CAR1B,wCAQXmB,WARW,eAQEC,YARF,eAUlBnB,SAAS,CAAC,UAAM,CACd;AACJ;AACA,OACI,QAASoB,CAAAA,UAAT,EAAsB,CACpB,GAAIC,MAAM,CAACC,IAAP,CAAYd,SAAZ,EAAuBe,MAAvB,GAAkC,CAAtC,CAAyC,CACvC;AACAhB,QAAQ,CAACJ,QAAQ,EAAT,CAAR,CACA;AACAI,QAAQ,CAACH,WAAW,EAAZ,CAAR,CACD,CAEDoB,SAAS,GAAI;AACd,EAEDJ,UAAU,GACX,CAhBQ,CAgBN,CAACL,WAAD,CAAcE,cAAd,CAhBM,CAAT,CAkBA;AACF;AACA,KACE,QAASO,CAAAA,SAAT,EAAqB,CACnB,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CAEA,GAAIJ,MAAM,CAACC,IAAP,CAAYd,SAAZ,EAAuBe,MAAvB,CAAgC,CAAhC,EAAqCF,MAAM,CAACC,IAAP,CAAYV,YAAZ,EAA0BW,MAA1B,CAAmC,CAA5E,CAAgF,CAC9Ef,SAAS,CAACkB,GAAV,CAAc,SAACC,IAAD,CAAU,CACtB,GAAIC,CAAAA,gBAAgB,CAAGhB,YAAY,CAACiB,MAAb,CAAoB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,MAAF,GAAaJ,IAAI,CAACK,EAAzB,EAApB,CAAvB,CAEAP,UAAU,CAACQ,IAAX,CAAgB,CACdN,IAAI,CAAEA,IADQ,CAEdb,QAAQ,CAAEc,gBAFI,CAAhB,EAKD,CARD,EASAT,YAAY,CAACM,UAAD,CAAZ,CACD,CACF,CAED,mBACE,YAAK,SAAS,CAAC,WAAf,uBACI,YAAK,SAAS,CAAC,4BAAf,UACCP,WAAW,CAACK,MAAZ,CAAqB,CAArB,eAA0B,KAAC,QAAD,EAAU,WAAW,CAAEL,WAAvB,EAD3B,EADJ,EADF,CAOD,CAvDD,CAyDA,cAAeZ,CAAAA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPosts } from \"../actions/PostsActions\";\nimport { getComments } from \"../actions/CommentsActions\";\nimport PostList from \"../components/PostList\";\n\n\nconst Index = () => {\n  const dispatch = useDispatch();\n\n  const postsData = useSelector((state) => state.postsState.posts);\n  const commentsData = useSelector((state) => state.commentsState.comments);\n  const postLoading = useSelector((state) => state.postsState.loading);\n  const commentLoading = useSelector((state) => state.commentsState.loading);\n\n  const [matchedData, MatchingData] = useState([]);\n\n  useEffect(() => {\n    /**\n     * Gets data from API\n     */\n    function getDatsAPI() {\n      if (Object.keys(postsData).length === 0) {\n        //Getting posts data\n        dispatch(getPosts());\n        //Getting comments data\n        dispatch(getComments());\n      }\n\n      matchData(); //Match posts to their right comments\n    };\n\n    getDatsAPI();\n  }, [postLoading, commentLoading]);\n\n  /**\n   * Match posts and their right comments\n   */\n  function matchData() {\n    let arrayPosts = [];\n\n    if (Object.keys(postsData).length > 0 && Object.keys(commentsData).length > 0 ) {\n      postsData.map((post) => {\n        let commentsFiltered = commentsData.filter((e) => e.postId === post.id);\n\n        arrayPosts.push({\n          post: post,\n          comments: commentsFiltered\n        });\n\n      });\n      MatchingData(arrayPosts);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n        <div className=\"row justify-content-center\">\n        {matchedData.length > 0 && <PostList matchedData={matchedData}/> }\n        </div>\n    </div>\n  );\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}