{"version":3,"sources":["types/index.js","reducers/CommentsReducer.js","reducers/PostsReducer.js","reducers/index.js","store.js","config/AxiosConfig.js","actions/PostsActions.js","actions/CommentsActions.js","components/Comment.js","components/NewComment.js","components/CommentList.js","components/Post.js","components/PostList.js","pages/index.js","App.js","reportWebVitals.js","index.js"],"names":["GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_COMMENTS","GET_COMMENTS_SUCCESS","GET_COMMENTS_ERROR","ADD_COMMENT","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","GET_DATA_STATE","GET_DATA_STATE_SUCCESS","initialState","comments","error","loading","posts","combineReducers","commentsState","state","action","type","payload","postsState","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","AxiosClient","axios","create","baseURL","getPostsStart","getPostsSuccess","data","getPostsError","getCommentsStart","getCommentsSuccess","getCommentsError","addComment","addCommentSuccess","addCommentError","Comment","comment","className","name","email","body","NewComment","id","dispatch","useDispatch","SvdNewComment","commentsData","a","allComments","useSelector","useState","postId","SvdComment","handleOnchange","e","target","value","onSubmit","preventDefault","parseInt","length","console","log","onChange","CommentList","map","shortid","generate","Post","postData","useEffect","display","getComments","post","title","displayComments","onClick","PostList","matchedData","Index","postsData","postLoading","commentLoading","MatchingData","Object","keys","get","then","arrayPosts","commentsFiltered","filter","push","matchData","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70b87999.chunk.js","sourcesContent":["//Get Posts\nexport const GET_POSTS= 'GET_POSTS';\nexport const GET_POSTS_SUCCESS='GET_POSTS_SUCCESS';\nexport const GET_POSTS_ERROR='GET_POSTS_ERROR';\n//Get Comments\nexport const GET_COMMENTS= 'GET_COMMENTS';\nexport const GET_COMMENTS_SUCCESS='GET_COMMENTS_SUCCESS';\nexport const GET_COMMENTS_ERROR='GET_COMMENTS_ERROR';\n//Add Comments  \nexport const ADD_COMMENT='ADD_COMMENT';\nexport const ADD_COMMENT_SUCCESS='ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_ERROR='ADD_COMMENT_ERROR';\nexport const GET_DATA_STATE = 'GET_DATA_STATE';\nexport const GET_DATA_STATE_SUCCESS = 'GET_DATA_STATE_SUCCESS';\n\n","import {\n  GET_COMMENTS,\n  GET_COMMENTS_SUCCESS,\n  GET_COMMENTS_ERROR,\n  ADD_COMMENT,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_ERROR,\n  GET_DATA_STATE,\n  GET_DATA_STATE_SUCCESS,\n} from \"../types\";\n\nconst initialState = {\n  comments: [],\n  error: false,\n  loading: false,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_COMMENTS:\n      return {\n        ...state,\n        comments: [],\n        error: false,\n        loading: true,\n      };\n    case GET_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        comments: action.payload,\n        error: false,\n        loading: false,\n      };\n\n    case GET_COMMENTS_ERROR:\n      return {\n        ...state,\n        comments: [],\n        error: true,\n        loading: false,\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        comments: [],\n        error: false,\n        loading: true,\n      };\n    case ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        comments: action.payload,\n        error: false,\n        loading: false,\n      };\n    case ADD_COMMENT_ERROR:\n      return {\n        ...state,\n        comments: [],\n        error: true,\n        loading: false,\n      };\n\n    case GET_DATA_STATE:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_DATA_STATE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n    GET_POSTS,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_ERROR\n}\n    from '../types';\n\nconst initialState = {\n    posts: [],\n    error: false,\n    loading: false\n}\n\nexport default function (state = initialState, action) {\n\n    switch (action.type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: [],\n                error: false,\n                loading: true\n            }\n        case GET_POSTS_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload,\n                error: false,\n                loading: false\n            }\n\n        case GET_POSTS_ERROR:\n            return {\n                ...state,\n                posts: [],\n                error: true,\n                loading: false,\n            }\n\n        default:\n            return state\n\n    }\n}\n","import {combineReducers} from 'redux';\nimport CommentsReducer from './CommentsReducer';\nimport PostsReducer from \"./PostsReducer\";\n\n\nexport default combineReducers({\n    commentsState:CommentsReducer,\n    postsState:PostsReducer\n})","import {createStore,applyMiddleware,compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from \"./reducers\"; \n\nconst initialState={};\n\nconst middleware=[thunk];\n\nconst store=createStore(\n    rootReducer,\n    initialState,\n    compose(applyMiddleware(...middleware)\n   , \n    window.__REDUX_DEVTOOLS_EXTENSION__ && \n    window.__REDUX_DEVTOOLS_EXTENSION__()\n    ));\n\nexport default store;\n\n","import axios from 'axios';\n\nconst AxiosClient=axios.create({\n    baseURL:'https://jsonplaceholder.typicode.com'\n});\n\nexport default AxiosClient;","import {\n    GET_POSTS,\n    GET_POSTS_SUCCESS,\n    GET_POSTS_ERROR\n}\nfrom '../types';\nimport AxiosClient from '../config/AxiosConfig';\n\n\nexport function getPosts() {\n    \n    return async (dispatch) => {\n\n        dispatch(getPostsStart());\n\n        try {\n            await AxiosClient.get(`/posts`)\n                .then(posts => {\n                    \n                    dispatch(getPostsSuccess(posts.data));\n                })\n        } catch (error) {\n            dispatch(getPostsError());\n        }\n    }\n}\n\nexport const getPostsStart = () => ({\n    type: GET_POSTS\n})\n\nexport const getPostsSuccess = data => ({\n    type: GET_POSTS_SUCCESS,\n    payload: data\n})\n\nexport const getPostsError = () => ({\n    type: GET_POSTS_ERROR\n})","import {\n  GET_COMMENTS,\n  GET_COMMENTS_SUCCESS,\n  GET_COMMENTS_ERROR,\n  ADD_COMMENT,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_ERROR,\n  GET_DATA_STATE,\n  GET_DATA_STATE_SUCCESS\n} from \"../types\";\nimport AxiosClient from \"../config/AxiosConfig\";\n\nexport function getComments() {\n  return async (dispatch) => {\n    dispatch(getCommentsStart());\n\n    try {\n      await AxiosClient.get(`/comments`).then((comments) => {\n        dispatch(getCommentsSuccess(comments.data));\n      });\n    } catch (error) {\n      dispatch(getCommentsError());\n    }\n  };\n}\n\nexport function AddNewComment(commentsData) {debugger\n  return async (dispatch) => {\n\n    dispatch(addComment());\n\n    try {\n      dispatch(addCommentSuccess(commentsData));\n    } catch (error) {\n      dispatch(addCommentError());\n    }\n  };\n}\n\nexport const getCommentsStart = () => ({\n  type: GET_COMMENTS,\n});\n\nexport const getCommentsSuccess = data => ({\n  type: GET_COMMENTS_SUCCESS,\n  payload: data,\n});\n\nexport const getCommentsError = () => ({\n  type: GET_COMMENTS_ERROR,\n});\n\nexport const addComment = () => ({\n  type: ADD_COMMENT,\n});\nexport const addCommentSuccess = data => ({\n  type: ADD_COMMENT_SUCCESS,\n  payload: data,\n});\nexport const addCommentError = () => ({\n  type: ADD_COMMENT_ERROR,\n});\nexport const getCommentsState = () => ({\n    type: GET_DATA_STATE\n  });\nexport const getCommentsStateSuccesss = () => ({\n    type: GET_DATA_STATE\n  });\n","import React from 'react';\n\nconst Comment = ({comment}) => {\n\n    return (\n        <div>\n            <p className=\"font-weight-bold\">{comment.name}</p>\n            <p className=\"font-bold small\">{comment.email}</p>\n            <p className=\"font-italic small\">{comment.body}</p>\n        </div>\n    );\n};\n\nexport default Comment;","import React,{useState} from \"react\";\nimport {AddNewComment} from '../actions/CommentsActions';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst NewComment = ({id}) => {\n\n    const dispatch = useDispatch();\n    \n    const SvdNewComment = (comment) => dispatch(AddNewComment(comment));\n\n    const allComments = useSelector((state) => state.commentsState.comments);\n\n    const [comment,SvdComment] = useState({\n        postId:0,   \n        id:0,\n        name:'',\n        email:'',\n        body:''\n    });\n\n const addComment = e =>{\n  \n    e.preventDefault();\n\n    const {name,email,body} = comment;\n    \n\n    if(name === '' || email === '' || body === ''){\n        console.log('Incomplete Data');\n        return;\n    }\n\n    comment.id = parseInt(allComments.length+1);\n    comment.postId = id;\n\n    SvdNewComment([...allComments,comment]);\n };\n\n const handleOnchange = e =>{\n    SvdComment({\n        ...comment,\n        [e.target.name]: e.target.value\n    })\n }\n\n  return (\n    <div className=\"mb-4\"> \n      <form onSubmit={addComment}>\n        <label>Name: </label>\n        <input className=\"mb-1\" id=\"name\" name=\"name\" type=\"text\" onChange={e=>handleOnchange(e)} />\n        <label>Email: </label>\n        <input className=\"mb-1\" id=\"email\" name=\"email\" type=\"text\" onChange={e=>handleOnchange(e)}/>\n        <label>Body: </label>\n        <input className=\"mb-1\"  id=\"body\" name=\"body\" type=\"text-area\" onChange={e=>handleOnchange(e)}/>\n        <input type=\"submit\" value=\"Add Comment\" />\n      </form>\n    </div>\n  );\n};\n\nexport default NewComment;\n","import React from 'react';\nimport Comment from './Comment';\nimport NewComment from './NewComment';\nimport shortid from 'shortid';\n\nconst CommentList = ({id,comments}) => {\n        \n    return (\n        <>\n            {\n                comments.map(comment=> <Comment key={shortid.generate()} comment={comment}/>)\n            }\n            <NewComment id={id}/>\n        </>\n       \n    );\n};\n\nexport default CommentList;","import React,{useState,useEffect} from \"react\";\nimport CommentList from './CommentList';\nimport {getCommentsState,getCommentsStateSuccesss} from '../actions/CommentsActions';\nimport { useDispatch } from \"react-redux\";\n\n\nconst Post = ({ postData}) => {\n\n  useEffect(() => {\n    \n    function gettingNewComments(){\n      if(display)\n        getComments();\n      else\n        getCommentsSuccess();\n\n    };\n\n    gettingNewComments();\n       \n  }, []);\n\n\n  const dispatch = useDispatch();\n  \n  const getComments = () => dispatch(getCommentsState());\n  const getCommentsSuccess = () => dispatch(getCommentsStateSuccesss());\n\n  const { comments, post } = postData;\n  const { id, title, body } = post;\n\n  const [display, displayComments] = useState(false);\n\n  return (\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n      <div className=\"card\">\n        <p className=\"font-weight-bold p-3 text-uppercase\">{title}</p>\n        <div className=\"card-body\">\n          <p className=\"card-text text-capitalize\">{body}</p>\n        </div>\n        <div className=\"card-footer mx-auto p-2\">\n\n          {display ? (\n            <CommentList key={id} id={id} comments={comments}/>\n          ) : (\n            <button key={id} onClick={() => displayComments(!display)}>\n              See Comments\n            </button>\n          )}\n\n          {display ? (\n            <button onClick={() => displayComments(!display)}>\n              Hide Comments\n            </button>\n          ) : null}\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport Post from \"./Post\";\nimport shortid from 'shortid';\n\n\nconst PostList = ({matchedData}) => {\n\n  return (\n      <div className=\"col-12 p-5 row\">\n        {matchedData.map((post) => (\n         <Post key={shortid.generate()} postData={post} />\n        ))}\n      </div>\n  );\n};\n\nexport default PostList;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPosts } from \"../actions/PostsActions\";\nimport { getComments } from \"../actions/CommentsActions\";\nimport PostList from \"../components/PostList\";\n\n\nconst Index = () => {\n  const dispatch = useDispatch();\n\n  const postsData = useSelector((state) => state.postsState.posts);\n  const commentsData = useSelector((state) => state.commentsState.comments);\n  const postLoading = useSelector((state) => state.postsState.loading);\n  const commentLoading = useSelector((state) => state.commentsState.loading);\n\n  const [matchedData, MatchingData] = useState([]);\n\n  useEffect(() => {\n    /**\n     * Gets data from API\n     */\n    function getDatsAPI() {\n      if (Object.keys(postsData).length === 0) {\n        //Getting posts data\n        dispatch(getPosts());\n        //Getting comments data\n        dispatch(getComments());\n      }\n\n      matchData(); //Match posts to their right comments\n    };\n\n    getDatsAPI();\n  }, [postLoading, commentLoading]);\n\n  /**\n   * Match posts and their right comments\n   */\n  function matchData() {\n    let arrayPosts = [];\n\n    if (Object.keys(postsData).length > 0 && Object.keys(commentsData).length > 0 ) {\n      postsData.map((post) => {\n        let commentsFiltered = commentsData.filter((e) => e.postId === post.id);\n\n        arrayPosts.push({\n          post: post,\n          comments: commentsFiltered\n        });\n\n      });\n      MatchingData(arrayPosts);\n    }\n  }\n\n  return (\n    <div className=\"container\">\n        <div className=\"row justify-content-center\">\n        {matchedData.length > 0 && <PostList matchedData={matchedData}/> }\n        </div>\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Index from \"./pages/index\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Index />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}